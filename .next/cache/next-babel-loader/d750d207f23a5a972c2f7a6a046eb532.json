{"ast":null,"code":"var _jsxFileName = \"/Users/ronaldmutebi/Desktop/Desktop/bench/react-hooks/src/ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\n\nvar ImageToggleOnScroll = function ImageToggleOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(function () {\n      return isInView();\n    });\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    style: {\n      width: \"200px\",\n      height: \"200px\"\n    },\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/ronaldmutebi/Desktop/Desktop/bench/react-hooks/src/ImageToggleOnScroll.js"],"names":["React","useEffect","useState","useRef","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight","width","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAkC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAC5D,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;;AAD4D,kBAE1BD,QAAQ,CAAC,IAAD,CAFkB;AAAA,MAErDM,SAFqD;AAAA,MAE1CC,YAF0C;;AAI5DR,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAAC,YAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACD,KAFD;AAGD,GATQ,CAAT;;AAJ4D,mBAehCV,QAAQ,CAAC,KAAD,CAfwB;AAAA,MAerDc,MAfqD;AAAA,MAe7CH,SAf6C;;AAiB5D,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AACpB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BC,IAAAA,SAAS,CAAC,YAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAKA,SAAON,SAAS,GAAE,IAAF,GACd;AACE,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UAD/B;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,KAAK,EAAE;AAAEkB,MAAAA,KAAK,EAAC,OAAR;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAHT;AAIE,IAAA,GAAG,EAAEjB,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAtCD;;AAwCA,eAAeH,mBAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\n  const imageRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(() => {\n      return isInView();\n    });\n    setIsLoading(false);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n\n  const [inView, setInView] = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n  return isLoading? null :(\n    <img\n      src={inView ? secondaryImg : primaryImg}\n      alt=\"\"\n      style={{ width:\"200px\", height: \"200px\" }}\n      ref={imageRef}\n    />\n  );\n};\n\nexport default ImageToggleOnScroll;\n"]},"metadata":{},"sourceType":"module"}