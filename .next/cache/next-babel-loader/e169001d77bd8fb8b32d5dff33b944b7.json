{"ast":null,"code":"var _jsxFileName = \"/Users/ronaldmutebi/Desktop/Desktop/bench/react-hooks/src/ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from \"react\";\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView();\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    style: {\n      height: \"355px\"\n    },\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/ronaldmutebi/Desktop/Desktop/bench/react-hooks/src/ImageToggleOnScroll.js"],"names":["React","useEffect","useState","useRef","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","window","addEventListener","scrollHandler","setInView","removeEventListener","inView","isInView","current","rect","getBoundingClientRect","top","bottom","innerHeight","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAC5D,QAAMC,QAAQ,GAAIJ,MAAM,CAAC,IAAD,CAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS;AACT,WACE,MAAM;AAACH,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,aAArC;AAAoD,KAD7D;AAGD,GANQ,CAAT;AAQA,QAAM;AAAA,OAACG,MAAD;AAAA,OAASF;AAAT,MAAsBT,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMY,QAAQ,GAAG,MAAM;AACrB,QAAGP,QAAQ,CAACQ,OAAZ,EAAoB;AAClB,YAAMC,IAAI,GAAGT,QAAQ,CAACQ,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,QAAMV,aAAa,GAAG,MAAM;AAC1BC,IAAAA,SAAS,CAAC,MAAM;AACd,aAAOG,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAKA,SACE;AAAK,IAAA,GAAG,EAAGD,MAAM,GAAEP,YAAF,GAAgBD,UAAjC;AAA6C,IAAA,GAAG,EAAC,EAAjD;AAAoD,IAAA,KAAK,EAAE;AAAEgB,MAAAA,MAAM,EAAE;AAAV,KAA3D;AAAgF,IAAA,GAAG,EAAEd,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CA7BD;;AA+BA,eAAeH,mBAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\n  const imageRef =  useRef(null);\n  \n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView()\n    return (\n      () => {window.removeEventListener(\"scroll\", scrollHandler)}\n    )\n  });\n\n  const [inView, setInView] = useState(false);\n\n  const isInView = () => {\n    if(imageRef.current){\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    })\n  }\n  return (\n    <img src={ inView? secondaryImg: primaryImg} alt=\"\" style={{ height: \"355px\" }} ref={imageRef} />\n  );\n};\n\nexport default ImageToggleOnScroll;\n"]},"metadata":{},"sourceType":"module"}